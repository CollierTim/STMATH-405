%
% function [x,k] = newtons(f,x,tol,nmax)
%
% This function returns in x a column vector x_k such that
%      || x_k - x_{k-1} || < tol (1 + ||x_k||)
% and in k the number of iterations (Jacobian evaluations) required.
% On entry, x contains an initial guess.
% If k equals nmax then no convergence has been reached.
% 
% The iterates ||f(x_k)|| are recorded. This option
% can be easily turned off

%radius 8 and 4
x = [6;6]; % ensure x is a column vector
fprintf ('k       ||f(x_k)|| \n')
format long g
xarray = x;
tol = 1e-8;
nmax = 50;
c1 = [0;0];
c2 = [5;12];
%Newton
for k=1:nmax
    r = [8;4];
  [fx,Jx] = nm_demo_prob(x,c1,c2,r);
  fprintf ('%d     %e     \n',k-1,norm(fx) )
  p = -Jx \ fx;
  x = x + p;
  xarray = [xarray x];
end
k = nmax;

%radius 8 and 5
x = [6;6];
fprintf ('k       ||f(x_k)|| \n')
format long g
xarray = x;
tol = 1e-8;
nmax = 50;
c = [5;12];
for k=1:nmax
    r = [8;5];
  [fx,Jx] = nm_demo_prob(x,c1,c2,r);
  fprintf ('%d     %e     \n',k-1,norm(fx) )
  p = -Jx \ fx;
  x = x + p;
  xarray = [xarray x];
end
k = nmax;


%radius 8 and 6
x = [6;6];
fprintf ('k       ||f(x_k)|| \n')
format long g
xarray = x;
tol = 1e-8;
nmax = 50;
c = [5;12];
for k=1:nmax
    r = [8;6];
  [fx,Jx] = nm_demo_prob(x,c1,c2,r);
  fprintf ('%d     %e     \n',k-1,norm(fx) )
  p = -Jx \ fx;
  x = x + p;
  xarray = [xarray x];
end
k = nmax;
